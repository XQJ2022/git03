<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\Objects\LCD12864.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\Objects\LCD12864.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sun Apr 03 16:52:13 2022
<BR><P>
<H3>Maximum Stack Usage =         72 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Key_Ctrl &rArr; lcd_wstr &rArr; lcd_pos &rArr; send_cmd &rArr; send_dat
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[d]">Reserved_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">Reserved_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[f]">ACMP_OPA_IRQHandler</a> from isr.o(i.ACMP_OPA_IRQHandler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[1b]">ADC0_IRQHandler</a> from isr.o(i.ADC0_IRQHandler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[1c]">ADC1_IRQHandler</a> from isr.o(i.ADC1_IRQHandler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[1d]">ADC2_IRQHandler</a> from isr.o(i.ADC2_IRQHandler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[1e]">ADC_IRQHandler</a> from isr.o(i.ADC_IRQHandler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[14]">COPROC_IRQHandler</a> from isr.o(i.COPROC_IRQHandler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[13]">DMA_IRQHandler</a> from isr.o(i.DMA_IRQHandler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[22]">ERU0_IRQHandler</a> from isr.o(i.ERU0_IRQHandler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[23]">ERU1_IRQHandler</a> from isr.o(i.ERU1_IRQHandler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[24]">ERU2_IRQHandler</a> from isr.o(i.ERU2_IRQHandler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[25]">ERU3_IRQHandler</a> from isr.o(i.ERU3_IRQHandler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[18]">GPIO0_IRQHandler</a> from isr.o(i.GPIO0_IRQHandler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[19]">GPIO1_IRQHandler</a> from isr.o(i.GPIO1_IRQHandler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[1a]">GPIO2_IRQHandler</a> from isr.o(i.GPIO2_IRQHandler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from isr.o(i.HardFault_Handler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[17]">IWDT_IRQHandler</a> from isr.o(i.IWDT_IRQHandler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from isr.o(i.NMI_Handler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[1f]">PWM0_IRQHandler</a> from isr.o(i.PWM0_IRQHandler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[20]">PWM4_IRQHandler</a> from isr.o(i.PWM4_IRQHandler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[21]">PWM_COMB_IRQHandler</a> from isr.o(i.PWM_COMB_IRQHandler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from isr.o(i.PendSV_Handler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[d]">Reserved_IRQHandler</a> from startup_sc32f5832.o(.text) referenced 6 times from startup_sc32f5832.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_sc32f5832.o(.text) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[e]">SPI0_IRQHandler</a> from isr.o(i.SPI0_IRQHandler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from isr.o(i.SVC_Handler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[15]">SYS_IRQHandler</a> from isr.o(i.SYS_IRQHandler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from isr.o(i.SysTick_Handler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[26]">SystemInit</a> from system_sc32f5832.o(i.SystemInit) referenced from startup_sc32f5832.o(.text)
 <LI><a href="#[11]">TIM6_T0_IRQHandler</a> from isr.o(i.TIM6_T0_IRQHandler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[12]">TIM6_T1_IRQHandler</a> from isr.o(i.TIM6_T1_IRQHandler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[10]">TIMER0_IRQHandler</a> from isr.o(i.TIMER0_IRQHandler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[b]">UART0_IRQHandler</a> from uart0.o(i.UART0_IRQHandler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[c]">UART1_IRQHandler</a> from uart1.o(i.UART1_IRQHandler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[16]">WWDT_IRQHandler</a> from isr.o(i.WWDT_IRQHandler) referenced from startup_sc32f5832.o(RESET)
 <LI><a href="#[28]">__main</a> from __main.o(!!!main) referenced from startup_sc32f5832.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[29]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2b]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[50]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[51]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2c]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[52]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[30]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[53]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[54]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[55]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[56]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[57]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[58]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[59]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[5a]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[5b]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[5c]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[5d]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[5e]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[5f]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[60]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[61]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[62]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[63]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[64]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[65]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[66]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[67]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[35]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[68]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[69]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[6a]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[6b]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[6c]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[6d]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[6e]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[2a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[6f]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2d]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2f]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[70]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[31]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Key_Ctrl &rArr; lcd_wstr &rArr; lcd_pos &rArr; send_cmd &rArr; send_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[71]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[3b]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[34]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[72]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[36]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sc32f5832.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>Reserved_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sc32f5832.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reserved_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reserved_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_sc32f5832.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[73]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[33]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[76]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[77]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[78]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>ACMP_OPA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.ACMP_OPA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[1b]"></a>ADC0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.ADC0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.ADC1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.ADC2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, isr.o(i.ADC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>COPROC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.COPROC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.DMA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>Device_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, devinit.o(i.Device_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Device_Init &rArr; lcd_init &rArr; send_cmd &rArr; send_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCLK_Init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_init
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22]"></a>ERU0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.ERU0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ERU1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.ERU1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ERU2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.ERU2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ERU3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.ERU3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>GPIO0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.GPIO0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>GPIO1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.GPIO1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GPIO2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.GPIO2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>GPIO_AF_SEL</STRONG> (Thumb, 418 bytes, Stack size 16 bytes, gpio.o(i.GPIO_AF_SEL))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_AF_SEL &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_init
</UL>

<P><STRONG><a name="[42]"></a>GPIO_PUPD_SEL</STRONG> (Thumb, 386 bytes, Stack size 12 bytes, gpio.o(i.GPIO_PUPD_SEL))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PUPD_SEL &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_init
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>IWDT_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.IWDT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>KEY_init</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, key.o(i.KEY_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY_init &rArr; GPIO_AF_SEL &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PUPD_SEL
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AF_SEL
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[43]"></a>Key_Ctrl</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, key.o(i.Key_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Key_Ctrl &rArr; lcd_wstr &rArr; lcd_pos &rArr; send_cmd &rArr; send_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ReadSta_Task
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_wstr
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>Key_ReadSta_Task</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, key.o(i.Key_ReadSta_Task))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Ctrl
</UL>

<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>OPENPLL</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, clk.o(i.OPENPLL))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPll
</UL>

<P><STRONG><a name="[47]"></a>PLLSET</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, clk.o(i.PLLSET))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PLLSET
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPll
</UL>

<P><STRONG><a name="[1f]"></a>PWM0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, isr.o(i.PWM0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PWM4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.PWM4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PWM_COMB_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.PWM_COMB_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SPI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.SPI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SYS_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.SYS_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SetPll</STRONG> (Thumb, 230 bytes, Stack size 4 bytes, clk.o(i.SetPll))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetPll &rArr; PLLSET
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLLSET
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPENPLL
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCLK_Init
</UL>

<P><STRONG><a name="[49]"></a>SetSysTick</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, clk.o(i.SetSysTick))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCLK_Init
</UL>

<P><STRONG><a name="[3d]"></a>SysCLK_Init</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, clk.o(i.SysCLK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SysCLK_Init &rArr; SetPll &rArr; PLLSET
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysTick
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPll
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_sc32f5832.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(.text)
</UL>
<P><STRONG><a name="[11]"></a>TIM6_T0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.TIM6_T0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM6_T1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.TIM6_T1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, isr.o(i.TIMER0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>UART0_IRQHandler</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, uart0.o(i.UART0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>UART1_IRQHandler</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, uart1.o(i.UART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>WWDT_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.WWDT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f5832.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpio.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PUPD_SEL
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AF_SEL
</UL>

<P><STRONG><a name="[4c]"></a>delay_us</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dat
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[4a]"></a>lcd_clear</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lcd12864.o(i.lcd_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_clear &rArr; send_cmd &rArr; send_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>lcd_init</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, lcd12864.o(i.lcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_init &rArr; send_cmd &rArr; send_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[4d]"></a>lcd_pos</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lcd12864.o(i.lcd_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lcd_pos &rArr; send_cmd &rArr; send_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_wstr
</UL>

<P><STRONG><a name="[45]"></a>lcd_wstr</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lcd12864.o(i.lcd_wstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lcd_wstr &rArr; lcd_pos &rArr; send_cmd &rArr; send_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_char
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Ctrl
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>main</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = main &rArr; Key_Ctrl &rArr; lcd_wstr &rArr; lcd_pos &rArr; send_cmd &rArr; send_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_wstr
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Ctrl
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[4b]"></a>send_cmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lcd12864.o(i.send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = send_cmd &rArr; send_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dat
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_pos
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[4f]"></a>send_dat</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lcd12864.o(i.send_dat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = send_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_char
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[4e]"></a>write_char</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lcd12864.o(i.write_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_char &rArr; send_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dat
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_wstr
</UL>
<P>
<H3>
Local Symbols
</H3><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[3a]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
